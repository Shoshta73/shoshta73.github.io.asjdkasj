name: Bump version and Deploy

on:
  push:
    branches:
      - main

jobs:
  bump-version:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/setup-node@v4
        with:
          node-version: "20.11.0"
      - uses: pnpm/action-setup@v2
        with:
          version: "latest"
      - name: Setup git
        run: |
          git config --global user.email "sostaric.borna@hotmail.com"
          git config --global user.name "Shoshta73"
          git config --global pull.rebase true
          git remote set-url origin https://git:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Bump version
        run: |
          COMMIT_MESSAGE="$(git log --format=%B -n  1 ${{ github.sha }} | head -n1)"
          SCOPE=$(echo $COMMIT_MESSAGE | grep -oP '\(\K[^)]*(?=\))')
          TYPE=$(echo $COMMIT_MESSAGE | awk '{print $1}')
          echo "Commit Message: $COMMIT_MESSAGE"
          echo "Scope: $SCOPE"
          echo "Type: $TYPE"
          if [[ "$TYPE" =~ ^(fix|hotfix|add|impl|style) ]]; then
            echo "Patch Bump Needed."
            if [[ "$SCOPE" == "api" ]]; then
              cd api
            elif [[ "$SCOPE" == "frontend" ]]; then
              cd frontend
            fi
            pnpm version patch --no-git-tag-version
            git add .
            MSG=$(node -p 'require("./package.json").version')
            git commit -m"$SCOPE v$MSG"
            cd ..
            pnpm version patch
            git push --follow-tags origin main
            git push origin main:production
          elif [[ "$TYPE" =~ ^(feature|feat|change) ]]; then
            echo "Minor Bump Needed."
            if [[ "$SCOPE" == "api" ]]; then
              cd api
            elif [[ "$SCOPE" == "frontend" ]]; then
              cd frontend
            fi
            pnpm version minor --no-git-tag-version
            git add .
            MSG=$(node -p 'require("./package.json").version')
            git commit -m"$SCOPE v$MSG"
            cd ..
            pnpm version minor
            git push --follow-tags origin main
            git push origin main:production
          elif [[ "$TYPE" =~ ^(breaking|major|release|rel) ]]; then
            echo "Major Bump Needed."
            git commit -m"$SCOPE v$MSG"
            pnpm version major --no-git-tag-version
            git add .
            MSG=$(node -p 'require("./package.json").version')
            if [[ "$SCOPE" == "api" ]]; then
              git commit -m"api v$MSG"
            elif [[ "$SCOPE" == "frontend" ]]; then
              git commit -m"frontend v$MSG"
            fi
            cd ..
            pnpm version major
            git push --follow-tags origin main
            git push origin main:production
          elif [[ "$TYPE" =~ ^(docs) ]]; then
            echo "No Version Bump Needed."
            cd docs
            if [[ "$SCOPE" == "patch" ]]; then
              pnpm version patch --no-git-tag-version
              git add .
              MSG=$(node -p 'require("./package.json").version')
              git commit -m"docs v$MSG"
            elif [[ "$SCOPE" == "minor" ]]; then
              pnpm version minor --no-git-tag-version
              git add .
              MSG=$(node -p 'require("./package.json").version')
              git commit -m"$MSG"
            elif [[ "$SCOPE" == "major" ]]; then
              pnpm version major --no-git-tag-version
              git add .
              MSG=$(node -p 'require("./package.json").version')
              git commit -m"$MSG"
            fi
            cd ..
            git push --follow-tags origin main
            git push origin main:production --force
          else
            echo "No Version Bump Needed."
          fi

  buildanddeploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{steps.deployment.outputs.page_url}}
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        name: Checkout
        with:
          submodules: recursive

      - uses: actions/setup-node@v4
        name: Setup Node
        with:
          node-version: "20.11.0"

      - uses: pnpm/action-setup@v2
        name: Setup pnpm
        with:
          version: 8

      - name: Build
        run: |
          pnpm install -r
          cd frontend
          pnpm run build
          cd ..

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./frontend/dist

      - name: Configure GitHub pages
        uses: actions/configure-pages@v4

      - name: Deploy to GitHub pages
        id: deployment
        uses: actions/deploy-pages@v4
